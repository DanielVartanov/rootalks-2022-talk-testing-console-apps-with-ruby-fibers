TODO
----

* Prepare the slides
  https://docs.google.com/presentation/d/1gd12UxBKWzBxu-TgM-YGD1bFaIm4B0kdsGcv2dkzgU8/edit#slide=id.g13b468ea994_0_0

* Нотатки-комментарии внеси в презу
  Как тогда с bit shits in history!

* Установи то расширение, которое увеличивает шрифт нотаток

* Теперь репетируй только медленно и только с нотатками

* Отрепетируй с Хэмином, внеси коррективы

* Отрепетируй с оргами второй экран


Content
-------

---=== Sloooooow ===---

-- Section: Console tools on the rise

(slide: Rust logo and Golang logo)

Hello! At first, a little tribute to Rust and Golang. Because of them
we are now having a renaissance of console tools development, a whole
new wave to replace long-standing pillars of built-in console tools,
which live with us for _decades_.

+------+--------+
| cd   | z      |
| grep | rg     |
| find | fd     |
| cat  | bat    |
| mc   | xplr   |
| ls   | exa    |
|      | fzf    |
+------+--------+
There are very good replacements for cd, grep, find, cat, midnight
commander and even something as simple as ls.

And even _new_ tools emerged, fuzzy search tool, fzf, written in Go,
it doesn't have a predecessor. There was no mainstream console tool for fuzzy
search at all!


But. Don't get me wrong: all those grep and find, they are great, it's
just the new ones are _even better_ for everyday use. For the first
time in decated people dared to challenge gem, and succeeded.
Again, thanks to the rise of low-level programming languages, which
are designed for systems programming.


-- Section: Console apps, not just console tools!

 go, rust, renaissance of new console tools development
 console apps devlopment is often associated with low-level
 programming, high-speed execution, where every byte, every CPU cycle
 counts. But that's not always the case, especially when the app is
 interactive, when most of the time it waits for the user to make a
 move.


But here comes a problem, an unfortunate price of this success:
console programs still get associated with low-level programming, or
even systems programming. Inevitably, console programs are perceived
as something which is hard to write.
_It's a myth, and I am going to bust it now._ Just give me a few
minutes :-)

On purpose, I will call console programs console **apps**, not console
tools, exactly to emphasise they can solve daily users needs, or even
business needs.

And, also on purpose, I'll write them Ruby, an indisputably
easy-to-learn language. As a Ruby enthusiast, I would note that Ruby is
rather hard to master, but anyway it's a remarkably junior-friendly
language.

**But**, before I go further, a real-life example!

In my previous startup, very suddenly, our home-grown Continuous
Integration was broken, irrevocably. We decided to finally move away from
our home-grown Jenkins to Github Actions and CircleCI, but it would
take _weeks_ to move all the processes, checks, guard rails to new CI.

So, while we were waiting for the our CI, we needed something _quick_
to make our deployments a bit less error-prone, you know, to keep all
the safety measures. When you deploy manually, they are very easy to forget.

The best solution turned out to be console app, I'll quickly show it
to you now.


-- Section: Demo of my deployment app

// it checked whether someone else is deploying right now
// it checked if you have deployed your changes to staging before
    deploying production
// it allowed for fast track in emergencies\
// it even allows you to pick individual commits to deploy
// it runs git commands under the hood and gives you the result
// "It even allowed to pick specific commits do deploy"


A nice looking app, does its job, easy to use. Above all:
There is no backend and frontend in web. HTML forms,
controllers, or even worse, frontend framework, storing github secrets
at server, authenticating the user. Non of that is needed as the app
is running locally, at a machine of each developer, there is no
server, everything is in the app, no backend and frontend, git credentials of each user is their
authentication, no need for security checks, no server running in
cloud, no monitoring, no maintenance, no nothing.

I estimate, overall building it as a console app took several times
less engineering time than building it as a web app.

And now I'll show how _easy_ such apps are built in Ruby.


-- Section: Building console apps in Ruby

(short demo of easiness of tty-toolkit things, awesome! Right in IRB)

tty-toolkit is an amazing set of tools, huge thanks to its maintainer
  this gem will become a part of the toolkit when there is enough application developers use it
     therefore, now it's over to you folks!


// then switch to scripts, but show IRB first

// spinner: inside could be, say, `git push`. Just imagine amount of
frontend work and backend work to have the same spinner in web.

// see script-drafts.rb


-- Section: Okay, imagine we wrote an app, how do we test?

Imagine a web app, how do we test it?

From a bird's eye view functional testing of a web app looks like
this: you've got nested cases, when the account is created, when there
is item

// at each step you test it, everywhere where are there three dots you
// inpsect response attributes, inspect the world and so on

// show this by adding code context by context

(tell about differences between web and console, the _points_ of rest
where you can test the app)
  "a meaningful point of rest your code _stops_ executing for some
  time so that you can inspect the surroundings or provide a new
  input, a new nudge to your code"
  In unit-tests these meaningful points of rest are the method call:
  before you call a method, and after.
  In web application world it is before and after a HTTP request, you
  provide an input as requerst data, after request you inspect a
  response, you might inspect your database or other surroundings. In
  short, those are meaningful points of rest.

  web applications have well defined moments when they can be tested: before and after a request

  but an application, it just runs, potentially forever if a user doesn't quit

In Ruby world, you _expect_ things to be tested like this, _this_ is a
quality bar which is _default_ in Ruby world.

But if you _actually_ try to test your console app like this,
surprisingly you _won't_ find neither a testing library, nor a testing
framework, nor even a simple way of doing it, there is just no way.
I was in this situation I had to come up with my own way.

After many experiments it turned out that probably the best DSL for
console apps testing framework you can get if you use Ruby Fibers.
Fibers were introduced one major Ruby version ago, but they are still
underappreciated, not widely used.



-- Section: How Fibers work in Ruby in general

// threads get switched almost randomly back and forth
  //Mainly it happens at method boundaries, but in general it's all
     concealed.

//ad your talk "just google What does
   Gil guarantee you, you'll see my talk [and show a screenshot so
   that they knew they have found a right one!]")

// even if all a thread does is waiting for a remote API or a database
    to respond, CPU time is still used, which is waste

// To avoid waste we can use cooperative /kəʊˈɒp.ər.ə.tɪv/ multitasking!
   // In ruby, it is implemented via Fibers

// In case of ordinary threads Ruby interpreter has full control over when

In contrast to regular threads, with Fibers, a block
voluntarily gives up CPU time to another block at defined points.

//  execution of one thread switches to execution of another one...

// some simple Fiber example, without any HTTP

// and then show that progress bar does **not** progress until we do
    `fiber.resume`!, as the thread does not get executed it at all until
    we explicitly say so, which is exactly what we need in testing, we
    need everything to stop while we are inspecting)
    then run `fiber.resume` for several times to show that spinner spins,
    until we get the HTTP result

// it _stops_, and we can't execute the next line of code until it's done

// Not a single line of your code gets executed until the server
// responds, we are stuck. Fibers are useless if we are using


In order to utilise Fibers, we need to take asynchronous libraries

So, in real life, something like this happens:

But with Fibers, depending on what else we are doing we might or might
not give that block CPU time.

If it was a regular _thread_, that progress bar would gradually move
forward as the remote server slowly responds with data. Because with
regular threads we do not control when and for how long do we switch
execution between blocks.

//In Fibers its all the way around, you got 100% control. It doesn't
    mean it's easier, or better, it's just different, pick it only for the
    right task


So, that's fibers -- total control over switch between execution of
blocks in Ruby.

Now let's apply that to testing of console apps.


-- Section: So, how tty-testing is built internally, where fibers are
   // muahahaha, the shortest part of all talk! :-D

// so, we are to stop execution of a console app which we are testing
   at moments of user input and app output

// all those tty-promots boil down to a handful of low-level methods

// show how we re-define? or just say it?


Aaand, that's it! Literally, everything else is just DSL for
convenience. But look what we can do with such a simple thing:


-- Show testing of a simplest app

Let's take a simple app which asks you if you want to order food, and if
you do, asks you what exact

// No, don't print the code, show how it LOOKS! No code, only demo and tests!

// Now how would we test it?

see scripts-and-drafts

-- Section: Conclusion / The End
  // screenshot of tty-testing github page

  This testing framework is shipped as a gem called `tty-testing`, it
  is not yet officially included into `tty-toolkit` because I am too lazy
  to do the boilerplate work, but it's already usable! Enjoy! Thank
  you :-)
